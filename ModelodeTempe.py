# -*- coding: utf-8 -*-
"""Copia de ModeloTa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16bjiDBSCJTbrNA_6spjC39pBBofVHCGE
"""

!pip install matplotlib-venn
!apt-get -qq install -y libfluidsynth1

import numpy as np
import scipy.integrate
import numpy as np
import matplotlib as plt
import math as m
from sympy import *
import openpyxl
import pandas as pd

from scipy.integrate import solve_ivp

#datos 
V = 86 #	Volumen del invernadero - m3
As = 20 #	Área del piso del invernadero – m2	
Ac = 97.76 #Área de la cubierta – m2
Avent = 5.64 #Área de ventilación – m2
l0 = 4 #	Longitud de las ventanas - m
W0 = 0.705  #Ancho de las ventanas - m	
Ps = 0.5 # Profundidad a la que se estima la temperatura del suelo - m 
Cp = 1006 #Calor especifico del aire a presión constante - J/kg°C
P = 742.80  #Presión atmosférica -hPa
hc = 10 #	Coeficiente de transferencia de calor de la cubierta - W/m2·°C
Ttot = 0.85 # Coeficiente de transmisión de radiación solar
Ks = 1 	#Coeficiente de intercambio de calor a través del suelo W/m2·°C
Cf = 0.0048  #	Coeficiente de infiltración – m3/sm2
Cw = 0.01 #	Coeficiente de efecto del viento

Le = 1 # Número de Lewis del sistema aire - agua
l = 2283.3 # landa como el calor latente de vaporización - kJ/kg

Data = pd.read_csv("DatosDia2018.csv", sep = ",", header = 0) #Cargar los datos del dia
Te_d = [float(x) for x in Data['Tmax ']]
Irad_d = [float(x) for x in Data['Rad. Solar']] #crear una lista con los datos de radiacion
Ve_d = [float(x) for x in Data['Velo. Viento']]
Ts_d = [float(x) for x in Data['Ts']]
Tc_d = [float(x) for x in Data['Tc']]
HR_d = [float(x) for x in Data['HR']]

i = 0
while i < 24:
  Irad = Irad_d[i]
  Te = Te_d[i]
  Ve = Ve_d[i]
  Ts = Ts_d[i] + 1
  Tc = Tc_d[i]
  HR = HR_d[i]
  Tevals = np.arange(0,24)

  def function(t,Ta): 
    return ((1)/((V/As)*(Cp)*((100*P)/(1.01*287*(Ta+273.16)))))*((Ttot*Irad)-(hc*(Ac/As)*(Ta-Te))-(((Avent/2)*((1.75+(0.7*m.exp((-l0/W0)/32.5)))**-0.5)*(Cw**0.5)*(Ve)+(Cf*As))*((100*P)/(1.01*287*(Ta+273.16)))*Cp*(Ta-Te))-((Ks*As*(Ta-Ts))/Ps))+(l*(hc/((100*P/(1.01*287*(Ta+273.16)))*Cp*(Le**(2/3)))*((100*P)/(1.01*287*(Ta+273.16)))*Ac*(((0.611*HR*(0.611*((1+1.414*m.sin(5.82*m.exp(-3)*Ta))**8.827)))/(100*P))-(0.611*((1+1.414*m.sin(5.82*m.exp(-3)*Tc))**8.827)))))
  
  solution = solve_ivp(function, [0, 23], [18], t_eval= Tevals)

  if i == 0:
    SolDia = pd.DataFrame(solution.y)
  if i > 0:
    SolDia = pd.concat([SolDia , pd.DataFrame(solution.y)], axis = 0)
  i += 1
SolDia

print(Tevals)

import numpy as np
import matplotlib.pyplot as plt


fig = plt.figure()
x = Tevals
y = SolDia[23]
y1 = Te_d
yerr = np.linspace(0.05, 0.2, 24)
yerr1 = np.linspace(0.05, 0.2, 24)
upperlimits = [True, False] * 5
lowerlimits = [False, True] * 5
plt.errorbar(x, y , yerr=yerr, label='both limits (default)')

plt.errorbar(x, y1 , yerr=yerr1, label='both limits (default)')

plt.legend(loc='lower right')

print(Te)

SolDia.to_csv("ResultadosDiaFinal.csv",sep=",",index=false)